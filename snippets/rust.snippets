snippet a "assert"
  assert!($0);

snippet ae "assert_eq"
  assert_eq!($1, $2);

snippet an "assert_ne"
  assert_ne!($1, $2);

snippet closure "closure"
  |${1:x}| $0

snippet fn "function"
  fn $1($2) {
      $0
  }

snippet derive "derive"
  #[derive($0)]

snippet allow "allow"
  #![allow($0)]

snippet fmt "format"
  format!("$0");

snippet for "for"
  for ${1:elem} in ${2:collection} {
      $0
  }

snippet fori "fori"
  for ${1:i} in 0..${2:10} {
      $0
  }

snippet ifl "if let"
  if let $1 = $2 {
      $0
  }

snippet ifls "if let Some"
  if let Some($1) = $2 {
      $0
  }

snippet impl "impl"
  impl $1 {
      $0
  }

snippet implf "impl for"
  impl $1 for $2 {
      $0
  }

snippet loop "loop"
  loop {
      $0
  }

snippet match "match"
  match $1 {
      $0
  }

snippet ma "match arms"
  |$1| $2 => $0

snippet p "println"
  println!("$0");

snippet pf "pub field"
  pub $1: $2,

snippet while "while"
  while $1 {
      $0
  }

snippet whilel "while let"
  while let $1 = $2 {
      $0
  }

snippet whilels "while let Some"
  while let Some($1) = $2 {
      $0
  }

snippet penum "pub enum"
  pub enum $1 {
      $0
  }

snippet pstruct "pub struct"
  pub struct $1 {
      $0
  }

snippet ptrait "pub trait"
  pub trait $1 {
      $0
  }

snippet trait "trait"
  trait $1 {
      $0
  }

snippet patrait "trait"
  #[async_trait::async_trait]
  pub trait $1 {
      $0
  }

snippet type "type"
  type $1 = $0;

snippet use "use"
  use $1;

snippet enum "enum"
  enum $1 {
      $0
  }

snippet l "let"
  let $1 = $0;

snippet lm "let mut"
  let mut $1 = $0;

snippet m "mut"
  mut

snippet # "macro"
  #[$0]
