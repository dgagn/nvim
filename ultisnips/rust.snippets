snippet i "impl"
impl $1 {
    $2
}
endsnippet

snippet it "impl trait"
impl $1 for $2 {}
endsnippet

snippet s "struct"
struct $1 {
    $2
}
endsnippet

snippet sd "struct debug"
#[derive(Debug)]
struct $1 {
    $2
}
endsnippet

snippet t "trait"
trait $1 {
    $2
}
endsnippet

snippet tests "test module"
#[cfg(test)]
mod tests {
    use super::*;
    $0
}
endsnippet

snippet te "a single test"
#[test]
fn $1() {
    $0
}
endsnippet

snippet td "todo!"
todo!()
endsnippet

snippet ts "sqlx test"
#[sqlx::test]
async fn $1(pool: PgPool) {
    $0
}
endsnippet

snippet tt "async test"
#[tokio::test]
async fn $1() {
    $0
}
endsnippet

snippet e "enum"
enum $1 {
    $2
}
endsnippet

snippet ed "enum debug"
#[derive(Debug, $1)]
enum $2 {
    $3
}
endsnippet

snippet for "for"
for ${1:elem} in ${2:collection} {
    $0
}
endsnippet

snippet fori "fori"
for ${1:i} in 0..${2:10} {
    $0
}
endsnippet

snippet ifl
if let Some($1) = $2 {
    $3
}
endsnippet

snippet le "let else"
let $1 = $2 else {
    $3
};
endsnippet

snippet ty "type"
type $1 = $2;
endsnippet

snippet fr "from request parts"
#[async_trait::async_trait]
impl<S> FromRequestParts<S> for $1
where
    S: Send + Sync,
{
    type Rejection = $2;

    async fn from_request_parts(parts: &mut Parts, _state: &S) -> Result<Self, Self::Rejection> {
        Ok(Self)
    }
}
endsnippet

snippet amain "async main"
#[tokio::main]
async fn main() {
    $0
}
endsnippet

snippet main "main"
fn main() {
    $0
}
endsnippet

snippet f "function"
fn $1($2) {
    $0
}
endsnippet

snippet fn "function"
fn $1($2) -> $3 {
    $0
}
endsnippet

snippet af "function"
async fn $1($2) {
    $0
}
endsnippet

snippet afn "function"
async fn $1($2) -> $3 {
    $0
}
endsnippet

snippet ee "error"
#[derive(Debug, thiserror::Error)]
enum $1 {
    $2
}
endsnippet

snippet service "tower service and layer"
use tower_layer::Layer;
use tower_service::Service;
use std::{
    pin::Pin,
    task::{Context, Poll},
};

#[derive(Debug, Clone)]
pub struct $1Layer {}

impl $1Layer {
    pub fn new() -> Self {
        $1Layer {}
    }
}

impl<S> Layer<S> for $1Layer {
    type Service = $1<S>;

    fn layer(&self, inner: S) -> Self::Service {
        $1::new(inner)
    }
}

#[derive(Debug, Clone)]
pub struct $1<S> {
    inner: S,
}

impl<S> $1<S> {
    pub fn new(inner: S) -> Self {
        Self { inner }
    }

    define_inner_service_accessors!();

    pub fn layer() -> $1Layer {
        $1Layer::new()
    }
}

impl<S, R> Service<R> for $1<S>
where
    S: Service<R>,
{
    type Response = S::Response;
    type Error = S::Error;
    type Future = S::Future;

    fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {
        self.inner.poll_ready(cx)
    }

    fn call(&mut self, req: R) -> Self::Future {
        self.inner.call(req)
    }
}
endsnippet

snippet layer
use tower::Layer;

#[derive(Debug, Clone)]
struct $1 {}

impl<S> Layer<S> for $0 {
    type Service = $2<S>;

    fn layer(&self, service: S) -> Self::Service {
        $2::new(service)
    }
}
endsnippet

snippet middleware
use axum::{middleware::Next, response::Response};
use http::Request;

async fn $1<B>(
    request: Request<B>,
    next: Next<B>,
) -> Response {
    let response = next.run(request).await;
    response
}
endsnippet
